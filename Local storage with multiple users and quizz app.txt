Index.html

<div class="pal">
    <h1>SignUp</h1>
    <input placeholder="Enter Name" type="text" name="" id="inp">
    <br>
    <br>
    <input placeholder="Enter Email" type="text" name="" id="sec">
    <br>
    <br>
    <input placeholder="Enter Password" type="password" name="" id="seo">

    <br>
    <br>

    <div class="aaa">

        <button onclick="signup()">Signup</button>
            
       </div>



 </div>

App.JS

function signup(){


  var getInp=document.getElementById("inp")
  var getSec=document.getElementById("sec")
  var getSeo=document.getElementById("seo")


  localStorage.setItem("Name"  ,getInp.value)
  
  var obj={
  
    Name : getInp.value,
    Email : getSec.value,
    Password : getSeo.value
  
  }
  
  if(getInp.vallue=="" || getSec.value=="" || getSeo.value==""){
  
    alert("Please fill all credentials")
  
    getInp.value=""
    getSec.value=""
    getSeo.value=""
    return
  }
  
  
  else(alert("User added successfully"))
  
  var alluser=JSON.parse(localStorage.getItem("users")) || []
  
  alluser.push(obj)
  
  localStorage.setItem("users",JSON.stringify(alluser))
  
  getInp.value=""
  getSec.value=""
  getSeo.value=""

  location.href ="./login.html"
  
  
  }

Login .html

<div class="lap">
    <h1>Login</h1>

    <input placeholder="Enter Email" type="text" name="" id="email">
    <br>
    <br>
    <input placeholder="Enter Password" type="password" name="" id="password">
    <br>
    <br>
    <div class="bbb">

    <button onclick="signin()">Login</button>

</div>
 <a class="anchor" href="#" onclick="forgotPassword()">Forget Password?</a>
</div>


App.JS

function signin() {
    var getEmail = document.getElementById("email");
    var getPassword = document.getElementById("password");
  
    // get all users from localStorage
    var allUsers = JSON.parse(localStorage.getItem("users")) || [];
  
    // check if any user matches entered credentials
    var foundUser = allUsers.find(function(user) {
      return user.Email === getEmail.value && user.Password === getPassword.value;
    });
  
    if (foundUser) {
      alert("Signin successfully");
      location.href = "./welcome.html";
    } else {
      alert("Invalid Credentials");
    }
  
    getEmail.value = "";
    getPassword.value = "";
  }

Welcome.html in quizz Appp

<div class="intro-card" id="intro-card">

        <h2>Welcome <script>document.write(localStorage.getItem("Name"))</script></h2>
        <p class="pp">Please enter your details for quizz</p>
        <input type="text" id="name" placeholder="Enter your name" required />
        <input type="text" id="rollno" placeholder="Enter your roll number" required />
        <input type="text" id="studentid" placeholder="Enter your batch number" required />
        <button class="start-button" onclick="handleStart()">Start Quiz</button>
      </div>
    
    
    
    
    <div class="quiz-box">
        <h1>Quizz App</h1>
        <div id="timer" class="timer"></div>
        <div id="question" class="question"></div>
        <div id="answers" class="answers"></div>
        <div id="score" class="score"></div>
    
      </div>

App.JS


const questions = [
  {
    question: "Q1) What is CSS?",
    answers: ["CSS is a style sheet language", " CSS is designed to separate the presentation and content, including layout, colors, and fonts", " CSS is the language used to style the HTML documents", "All of the mentioned"],
    correct: 3
  },
  {
    question: "Q2) Which of the following tag is used to embed css in html page??",
    answers: ["<css>", "<!DOCTYPE html>", "<script>", "<style>"],
    correct: 3
  },
  {
    question: "Q3) Which of the following CSS selectors are used to specify a group of elements?",
    answers: ["tag", "id", "class", "both class and tag"],
    correct: 2
  },
  {
    question: "Q4) Which of the following has introduced text, list, box, margin, border, color, and background properties?",
    answers: ["HTML", "CSS", "PHP", "Ajax"],
    correct: 1
  },

  {
    question: "Q5) Which of the following CSS framework is used to create a responsive design?",
    answers: ["django", "rails", " larawell", "bootstrap"],
    correct: 3
  },

  {
    question: "Q6) Which of the following CSS selector is used to specify a rule to bind a particular unique element?",
    answers: ["tag", "id", " class", "both class and tag"],
    correct: 1
  },

  {
    question: "Q7)  Which of the following CSS property is used to make the text bold?",
    answers: [" text-decoration: bold", "font-weight: bold", "font-style: bold", " text-align: bold"],
    correct: 1
  },

  {
    question: "Q8)  Which of the following CSS style property is used to specify an italic text?",
    answers: [" style", "font", "font-style", " @font-style"],
    correct: 2
  },

  {
    question: "Q9) Which of the following are the CSS Extension Prefixes for Webkit?",
    answers: ["-chrome", "-web", "-0", "-web-kit"],
    correct: 3
  },


   {
    question: "Q10) Which of the following function defines a linear gradient as a CSS image?",
    answers: ["gradient()", "linear-gradient", "grayscale()", " image()"],
    correct: 1
  },






];

function handleStart() {
  const name = document.getElementById('name').value.trim();
  const rollno = document.getElementById('rollno').value.trim();
  const studentid = document.getElementById('studentid').value.trim();

  if (!name || !rollno || !studentid) {
    Swal.fire({
      icon: 'warning',
      title: 'Incomplete Details',
      text: 'Please fill out all fields before starting the quiz.',
      confirmButtonText: 'OK',
      customClass: {
        confirmButton: 'custom-ok-button'
      }
    });
    return;
  }



  // Hide intro card and show quiz
  document.getElementById('intro-card').style.display = 'none';
  document.querySelector('.quiz-box').style.display = 'block';

  startQuiz();
}





let currentQuestionIndex = 0;
let score = 0;
let timer;
let timeLeft = 60;

function startQuiz() {
  currentQuestionIndex = 0;
  score = 0;
  document.getElementById('score').textContent = `Score: ${score}`;
  showQuestion();
}

function showQuestion() {
  resetState();
  const questionElement = document.getElementById('question');
  const answersElement = document.getElementById('answers');
  const question = questions[currentQuestionIndex];

  questionElement.textContent = question.question;
  question.answers.forEach((answer, index) => {
    const button = document.createElement('button');
    button.textContent = answer;
    button.onclick = () => selectAnswer(index);
    answersElement.appendChild(button);
  });

  timeLeft = 60;
  updateTimerDisplay();
  clearInterval(timer);
  timer = setInterval(updateTimer, 1000);
}

function updateTimer() {
  timeLeft--;
  updateTimerDisplay();
  if (timeLeft <= 0) {
    clearInterval(timer);
    selectAnswer(-1);
  }
}

function updateTimerDisplay() {
  let minutes = Math.floor(timeLeft / 60);
  let seconds = timeLeft % 60;
  document.getElementById('timer').textContent =  `Time left: ${minutes}:${seconds.toString().padStart(2, '0')}`;
}

function selectAnswer(selectedIndex) {
  clearInterval(timer);
  const correctIndex = questions[currentQuestionIndex].correct;
  const buttons = document.querySelectorAll('.answers button');

  buttons.forEach((btn, idx) => {
    btn.disabled = true;
    if (idx === correctIndex) {
      btn.classList.add('correct');  // Show correct on the correct answer button
    } else if (idx === selectedIndex) {
      btn.classList.add('wrong');  // Show wrong on the selected answer button
    }
  });

  // Update score only if the answer was correct
  if (selectedIndex === correctIndex) {
    score++;
    document.getElementById('score').textContent = `Score: ${score}`;
  }

  // Move to the next question after a delay
  setTimeout(() => {
    currentQuestionIndex++;
    if (currentQuestionIndex < questions.length) {
      showQuestion();
    } else {
      showFinalScore();
    }
  }, 350); // Delay of 1.5 seconds before moving to the next question
}

function showFinalScore() {
  const totalQuestions = questions.length;
  const percentage = (score / totalQuestions) * 100;

  if(percentage>=70){
    resultStatus="Pass ✅"
  }

  else(resultStatus="Fail ❌")



  // Display SweetAlert message with Thank You, final score, percentage, and pass/fail
  Swal.fire({
    title: 'Thank You',
    html: `
      <p>Your final score: <strong>${score}/${totalQuestions}</strong></p>
      <p>Percentage: <strong>${percentage}%</strong></p>
      <p>Status: <strong>${resultStatus}</strong></p>
      <p>We appreciate your time and effort</p>
    `,
    icon: percentage >= 70 ? 'success' : 'error',
    confirmButtonText: '<button class="po" onclick="logout()">Logout</button>'
  
  });
}

function resetState() {
  document.getElementById('answers').innerHTML = '';
}


function logout(){
  window.location.reload()
  location.href="./index.html"
  }



function forgotPassword() {
      var email = prompt("Enter your registered email:");
  
      var allUsers = JSON.parse(localStorage.getItem("users")) || [];
  
      var userIndex = allUsers.findIndex(function(user) {
          return user.Email === email;
      });
  
      if (userIndex !== -1) {
          var newPassword = prompt("Enter your new password:");
  
          if (newPassword && newPassword.trim().length > 0) {
              allUsers[userIndex].Password = newPassword;
              localStorage.setItem("users", JSON.stringify(allUsers));
              alert("Password updated successfully!");
          } else {
              alert("Password cannot be empty.");
          }
      } else {
          alert("No account found with that email.");
      }
  }
  

Style.CSS

   body {
    justify-content: center;
    align-items: center;
  }
  
  .quiz-box {
    margin-top: 20px;
    background: gray;
    padding: 2rem;
    border-radius: 20px;
    width: 100%;
    max-width: 600px;
    display: none;
    margin: auto;
    margin-top: 50px;
  }

  .quiz-box h1{
    text-align: center;
    color: white;
  }
  
  .timer, .score {
    font-size: 1.2rem;
    margin-bottom: 1rem;
  }
  
  .feedback {
    font-size: 1.2rem;
    font-weight: bold;
    margin-bottom: 1rem;
    text-align: center;
    min-height: 1.5rem;
    transition: all 0.3s ease;
  }
  
  .feedback.correct {
    color: #28a745;
  }
  
  .feedback.wrong {
    color: #dc3545;
  }
  
  .question {
    font-size: 1.4rem;
    margin-bottom: 1rem;
    font-weight: bold;
  }
  
  .answers {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }
  
  .answers button {
    padding: 0.75rem 1rem;
    background-color: #2f3a4c;
    color: white;
    border: none;
    border-radius: 10px;
    font-size: 1rem;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }
  
  .answers button:hover {
    background-color: #3c4f6e;
  }
  
  .correct {
    background-color: #28a745 !important;
    color: white;
  }
  
  .wrong {
    background-color: #dc3545 !important;
    color: white;
  }
  
  .restart-button {
    background-color: #ffc107;
    color: #000;
    padding: 0.75rem 1.5rem;
    font-size: 1rem;
    border: none;
    border-radius: 10px;
    cursor: pointer;
    margin-top: 1rem;
  }
  
  .restart-button:hover {
    background-color: #e0a800;
  }

  

 #timer{
    text-align: center;
    color: purple;
    font-weight: bold;
 }

 .score{
  margin-top: 20px;
  color: white;

 }


 .intro-card {
    background-color: gray;
    color: #333;
    padding: 2rem;
    border-radius: 40px;
    max-width: 500px;
    width: 100%;
box-shadow:20px 40px 10px black ; 
   text-align: center;
    margin: auto;
    margin-top: 50px;
  
  
  }
  
  .intro-card h2 {
    margin-bottom: 10px;
    font-weight: bold;
  }
  
  .intro-card input {
    width: 400px;
    padding: 0.75rem;
    margin-bottom: 1rem;
    border: 1px solid #ccc;
    border-radius: 10px;
    font-size: 1rem;
  }
  
  .start-button {
    background-color: #28a745;
    color: white;
    padding: 0.75rem 1.5rem;
    font-size: 1rem;
    border: none;
    border-radius: 10px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }
  
  .start-button:hover {
    background-color: #218838;
  }


.intro-card h2 {
    color: white;
  }



  .pp{
    color: white;
    font-size: 20px;
  }


  
  .swal2-confirm {
    background: none !important;
    color: #000 !important;
  }

  .po{
    background-color: blue;
    color: white;
    width: 130px;
    height: 50px;
    border: none;
    border-radius: 10px;
    font-size: 17px;
  }


  .custom-ok-button {
    background-color: #218838 !important; 
    color: white !important;
    padding: 10px 20px;
    font-size: 16px;
    border-radius: 8px;
    box-shadow: 2px 4px 10px rgba(0, 0, 0, 0.2);
    transition: background-color 0.3s ease;
  }


@media (max-width: 600px) {

#name{
    width: 250px;
}

#rollno{
    width: 250px;
}

#studentid{

    width: 250px;

}

.intro-card {
    background-color: gray;
    color: #333;
    padding: 2rem;
    border-radius: 40px;
    max-width: 270px;
    width: 80%;
box-shadow:20px 40px 10px black ; 
   text-align: center;
margin-top: 80px;


}

.quiz-box {

  background: gray;
  padding: 2rem;
  border-radius: 20px;
  width: 80%;
  max-width: 600px;
  display: none;
  margin: auto;
  margin-top: 10px;
}

.quiz-box h1{
  text-align: center;
}


.answers button {
  padding: 0.75rem 1rem;
  background-color: #2f3a4c;
  color: white;
  border: none;
  border-radius: 10px;
  font-size: 1rem;
  cursor: pointer;
  transition: background-color 0.3s ease;
}


  
}

.pal{
  text-align: center; 
  background-color: blue;
  height: 320px;
  width: 200px;
  margin: auto;
  border-radius: 20px;
}

.pal h1{
  padding-top: 30px;
  color:  white;
}


.aaa{
  text-align: center;
}


.aaa button{
  background-color: crimson;
  width: 90px;
  height: 40px;
  border: none;
  border-radius: 10px;
  color: white;
}


.pal input{

  border-radius: 10px;
  height: 30px;
  width: 160px;
border: 2px solid black;
color: navy;

}

input::placeholder{
  color: red;
}


.lap{
  text-align: center; 
  background-color: blue;
  height: 270px;
  width: 200px;
  margin: auto;
  border-radius: 20px;
}

.lap h1{
  padding-top: 30px;
  color: white;
}





.lap input{

  border-radius: 10px;
  height: 30px;
  width: 160px;
border: 2px solid black;
color: navy;
}

.lap input{

  border-radius: 10px;
  height: 30px;
  width: 160px;
border: 2px solid black;
color: navy;

}

input::placeholder{
  color: red;
}



.bbb button{
  background-color: crimson;
  width: 90px;
  height: 40px;
  border: none;
  border-radius: 10px;
  color: white;
}


.bbb{
  text-align: center;
}

.anchor{
  text-align: center;
  color: white;
  font-size:11px;
text-decoration: none;
position: relative;
top: 5px;

}



@media only screen and (max-width: 600px) {
  

.pal{

  text-align: center; 
  background-color: blue;
  height: 400px;
  width: 330px;
  margin: auto;
  border-radius: 20px;
  margin-top: 30%;

}


.pal input{

  border-radius: 10px;
  height: 30px;
  width: 260px;
border: 2px solid black;
color: navy;
height: 50px;
font-size: 20px;

}


input::placeholder{
  color: red;
  font-size: 20px;
}

.aaa button{
  background-color: crimson;
  width: 120px;
  height: 50px;
  border: none;
  border-radius: 10px;
  color: white;
  font-size: 20px;
  padding-bottom: 5px;

}


.lap{

  text-align: center; 
  background-color: blue;
  height: 420px;
  width: 330px;
  margin: auto;
  border-radius: 20px;
  margin-top: 30%;

}


.lap input{

  border-radius: 10px;
  height: 30px;
  width: 260px;
border: 2px solid black;
color: navy;
height: 50px;
font-size: 20px;

}


input::placeholder{
  color: red;
  font-size: 20px;
}

.bbb button{
  background-color: crimson;
  width: 120px;
  height: 50px;
  border: none;
  border-radius: 10px;
  color: white;
  font-size: 20px;
  padding-bottom: 5px;
  margin-top: 10px;

}

.anchor{
  text-align: center;
  color: white;
  font-size:11px;
text-decoration: none;
position: relative;
top: 20px;
font-size: 17px;
}

}



